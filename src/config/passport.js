const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const jwt = require('jsonwebtoken');
const User = require('../models/user.model.js'); // ‚úÖ Import model User

require('dotenv').config();

passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,           // L·∫•y t·ª´ .env
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,   // L·∫•y t·ª´ .env
  callbackURL: "/api/auth/google/callback"          // URL chuy·ªÉn h∆∞·ªõng
},
  async (accessToken, refreshToken, profile, done) => {
    try {
      // ‚úÖ L·∫•y th√¥ng tin t·ª´ Google
      const userData = {
        googleId: profile.id,
        displayName: profile.displayName,
        email: profile.emails[0].value,
        avatar: profile.photos[0].value || null,   // L·∫•y avatar n·∫øu c√≥
      };

      // ‚úÖ Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i trong DB ch∆∞a
      let user = await User.findByEmail(userData.email);
      if (!user) {
        // ‚úÖ N·∫øu ch∆∞a t·ªìn t·∫°i => T·∫°o m·ªõi
        const insertId =  await User.create({
          name: profile.displayName,
          email: profile.emails[0].value,
          password: "1",
          role: "user"
        });
        user = await User.findById(insertId);
        console.log("‚úÖ T·∫°o m·ªõi ng∆∞·ªùi d√πng",user);
      } else {
        console.log("‚úÖ Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i");
      }
      console.log(user);
      // ‚úÖ T·∫°o JWT Token
      const token = jwt.sign(
        { userId: user.id, email: user.email, role: user.role, username: user.username },
        process.env.SECRET_KEY,
        { expiresIn: "1h" }
      );

      done(null, token); // Tr·∫£ v·ªÅ JWT Token

    } catch (error) {
      console.error("üî• L·ªói trong Google Auth:", error);
      done(error, false);
    }
  }
));